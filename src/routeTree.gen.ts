/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DamageCalculatorImport } from './routes/damage-calculator'
import { Route as IndexImport } from './routes/index'
import { Route as UnitsIndexImport } from './routes/units.index'
import { Route as AugmentsIndexImport } from './routes/augments.index'
import { Route as ActionsIndexImport } from './routes/actions.index'
import { Route as UnitsNewImport } from './routes/units.new'
import { Route as UnitsUnitIdImport } from './routes/units.$unitId'
import { Route as AugmentsNewImport } from './routes/augments.new'
import { Route as AugmentsAugmentIdImport } from './routes/augments.$augmentId'
import { Route as ActionsNewImport } from './routes/actions.new'
import { Route as ActionsActionIdImport } from './routes/actions.$actionId'

// Create/Update Routes

const DamageCalculatorRoute = DamageCalculatorImport.update({
  id: '/damage-calculator',
  path: '/damage-calculator',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnitsIndexRoute = UnitsIndexImport.update({
  id: '/units/',
  path: '/units/',
  getParentRoute: () => rootRoute,
} as any)

const AugmentsIndexRoute = AugmentsIndexImport.update({
  id: '/augments/',
  path: '/augments/',
  getParentRoute: () => rootRoute,
} as any)

const ActionsIndexRoute = ActionsIndexImport.update({
  id: '/actions/',
  path: '/actions/',
  getParentRoute: () => rootRoute,
} as any)

const UnitsNewRoute = UnitsNewImport.update({
  id: '/units/new',
  path: '/units/new',
  getParentRoute: () => rootRoute,
} as any)

const UnitsUnitIdRoute = UnitsUnitIdImport.update({
  id: '/units/$unitId',
  path: '/units/$unitId',
  getParentRoute: () => rootRoute,
} as any)

const AugmentsNewRoute = AugmentsNewImport.update({
  id: '/augments/new',
  path: '/augments/new',
  getParentRoute: () => rootRoute,
} as any)

const AugmentsAugmentIdRoute = AugmentsAugmentIdImport.update({
  id: '/augments/$augmentId',
  path: '/augments/$augmentId',
  getParentRoute: () => rootRoute,
} as any)

const ActionsNewRoute = ActionsNewImport.update({
  id: '/actions/new',
  path: '/actions/new',
  getParentRoute: () => rootRoute,
} as any)

const ActionsActionIdRoute = ActionsActionIdImport.update({
  id: '/actions/$actionId',
  path: '/actions/$actionId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/damage-calculator': {
      id: '/damage-calculator'
      path: '/damage-calculator'
      fullPath: '/damage-calculator'
      preLoaderRoute: typeof DamageCalculatorImport
      parentRoute: typeof rootRoute
    }
    '/actions/$actionId': {
      id: '/actions/$actionId'
      path: '/actions/$actionId'
      fullPath: '/actions/$actionId'
      preLoaderRoute: typeof ActionsActionIdImport
      parentRoute: typeof rootRoute
    }
    '/actions/new': {
      id: '/actions/new'
      path: '/actions/new'
      fullPath: '/actions/new'
      preLoaderRoute: typeof ActionsNewImport
      parentRoute: typeof rootRoute
    }
    '/augments/$augmentId': {
      id: '/augments/$augmentId'
      path: '/augments/$augmentId'
      fullPath: '/augments/$augmentId'
      preLoaderRoute: typeof AugmentsAugmentIdImport
      parentRoute: typeof rootRoute
    }
    '/augments/new': {
      id: '/augments/new'
      path: '/augments/new'
      fullPath: '/augments/new'
      preLoaderRoute: typeof AugmentsNewImport
      parentRoute: typeof rootRoute
    }
    '/units/$unitId': {
      id: '/units/$unitId'
      path: '/units/$unitId'
      fullPath: '/units/$unitId'
      preLoaderRoute: typeof UnitsUnitIdImport
      parentRoute: typeof rootRoute
    }
    '/units/new': {
      id: '/units/new'
      path: '/units/new'
      fullPath: '/units/new'
      preLoaderRoute: typeof UnitsNewImport
      parentRoute: typeof rootRoute
    }
    '/actions/': {
      id: '/actions/'
      path: '/actions'
      fullPath: '/actions'
      preLoaderRoute: typeof ActionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/augments/': {
      id: '/augments/'
      path: '/augments'
      fullPath: '/augments'
      preLoaderRoute: typeof AugmentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/units/': {
      id: '/units/'
      path: '/units'
      fullPath: '/units'
      preLoaderRoute: typeof UnitsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/damage-calculator': typeof DamageCalculatorRoute
  '/actions/$actionId': typeof ActionsActionIdRoute
  '/actions/new': typeof ActionsNewRoute
  '/augments/$augmentId': typeof AugmentsAugmentIdRoute
  '/augments/new': typeof AugmentsNewRoute
  '/units/$unitId': typeof UnitsUnitIdRoute
  '/units/new': typeof UnitsNewRoute
  '/actions': typeof ActionsIndexRoute
  '/augments': typeof AugmentsIndexRoute
  '/units': typeof UnitsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/damage-calculator': typeof DamageCalculatorRoute
  '/actions/$actionId': typeof ActionsActionIdRoute
  '/actions/new': typeof ActionsNewRoute
  '/augments/$augmentId': typeof AugmentsAugmentIdRoute
  '/augments/new': typeof AugmentsNewRoute
  '/units/$unitId': typeof UnitsUnitIdRoute
  '/units/new': typeof UnitsNewRoute
  '/actions': typeof ActionsIndexRoute
  '/augments': typeof AugmentsIndexRoute
  '/units': typeof UnitsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/damage-calculator': typeof DamageCalculatorRoute
  '/actions/$actionId': typeof ActionsActionIdRoute
  '/actions/new': typeof ActionsNewRoute
  '/augments/$augmentId': typeof AugmentsAugmentIdRoute
  '/augments/new': typeof AugmentsNewRoute
  '/units/$unitId': typeof UnitsUnitIdRoute
  '/units/new': typeof UnitsNewRoute
  '/actions/': typeof ActionsIndexRoute
  '/augments/': typeof AugmentsIndexRoute
  '/units/': typeof UnitsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/damage-calculator'
    | '/actions/$actionId'
    | '/actions/new'
    | '/augments/$augmentId'
    | '/augments/new'
    | '/units/$unitId'
    | '/units/new'
    | '/actions'
    | '/augments'
    | '/units'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/damage-calculator'
    | '/actions/$actionId'
    | '/actions/new'
    | '/augments/$augmentId'
    | '/augments/new'
    | '/units/$unitId'
    | '/units/new'
    | '/actions'
    | '/augments'
    | '/units'
  id:
    | '__root__'
    | '/'
    | '/damage-calculator'
    | '/actions/$actionId'
    | '/actions/new'
    | '/augments/$augmentId'
    | '/augments/new'
    | '/units/$unitId'
    | '/units/new'
    | '/actions/'
    | '/augments/'
    | '/units/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DamageCalculatorRoute: typeof DamageCalculatorRoute
  ActionsActionIdRoute: typeof ActionsActionIdRoute
  ActionsNewRoute: typeof ActionsNewRoute
  AugmentsAugmentIdRoute: typeof AugmentsAugmentIdRoute
  AugmentsNewRoute: typeof AugmentsNewRoute
  UnitsUnitIdRoute: typeof UnitsUnitIdRoute
  UnitsNewRoute: typeof UnitsNewRoute
  ActionsIndexRoute: typeof ActionsIndexRoute
  AugmentsIndexRoute: typeof AugmentsIndexRoute
  UnitsIndexRoute: typeof UnitsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DamageCalculatorRoute: DamageCalculatorRoute,
  ActionsActionIdRoute: ActionsActionIdRoute,
  ActionsNewRoute: ActionsNewRoute,
  AugmentsAugmentIdRoute: AugmentsAugmentIdRoute,
  AugmentsNewRoute: AugmentsNewRoute,
  UnitsUnitIdRoute: UnitsUnitIdRoute,
  UnitsNewRoute: UnitsNewRoute,
  ActionsIndexRoute: ActionsIndexRoute,
  AugmentsIndexRoute: AugmentsIndexRoute,
  UnitsIndexRoute: UnitsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/damage-calculator",
        "/actions/$actionId",
        "/actions/new",
        "/augments/$augmentId",
        "/augments/new",
        "/units/$unitId",
        "/units/new",
        "/actions/",
        "/augments/",
        "/units/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/damage-calculator": {
      "filePath": "damage-calculator.tsx"
    },
    "/actions/$actionId": {
      "filePath": "actions.$actionId.tsx"
    },
    "/actions/new": {
      "filePath": "actions.new.tsx"
    },
    "/augments/$augmentId": {
      "filePath": "augments.$augmentId.tsx"
    },
    "/augments/new": {
      "filePath": "augments.new.tsx"
    },
    "/units/$unitId": {
      "filePath": "units.$unitId.tsx"
    },
    "/units/new": {
      "filePath": "units.new.tsx"
    },
    "/actions/": {
      "filePath": "actions.index.tsx"
    },
    "/augments/": {
      "filePath": "augments.index.tsx"
    },
    "/units/": {
      "filePath": "units.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
